{"version":3,"sources":["Actions.ts","models/TestingCards.ts","Reducers.ts","Store.ts","components/AppDrawer.tsx","components/FullScreenSwitch.tsx","components/TestingCard.tsx","components/TestingCardPicker.tsx","App.tsx","registerServiceWorker.ts","index.tsx","images/transparency-grid.svg"],"names":["ActionTypes","TestingCardTypes","setTestingCard","card","type","SetTestingCard","EmptyTestingCard","Empty","PureColorTestingCard","name","color","Object","classCallCheck","this","PureColor","PredefinedTestingCards","InitialState","testingCard","__REDUX_DEVTOOLS_EXTENSION__","window","store","createStore","state","arguments","length","undefined","action","objectSpread","AppDrawer","_React$PureComponent","props","_this","possibleConstructorReturn","getPrototypeOf","call","onOpen","setState","isOpen","onClose","onMenuShowHelp","dispatch","Actions","onMenuShowSourceCode","open","inherits","createClass","key","value","classes","react","IconButton","className","menuButton","aria-label","onClick","Menu_default","a","SwipeableDrawer","anchor","drawerHeader","ChevronLeft_default","Divider","style","minWidth","List","ListItem","button","ListItemIcon","Help_default","ListItemText","primary","Code_default","React","FullscreenSwitch","onFullScreenChanged","e","fsdoc","document","isFullScreen","webkitIsFullScreen","fullscreenElement","msFullscreenElement","isFullscreen","addEventListener","removeEventListener","_this2","Tooltip","title","fsdoc1","exitFullscreen","webkitExitFullscreen","msExitFullscreen","apply","fshtml","documentElement","requestFullscreen","webkitRequestFullscreen","msRequestFullscreen","disabled","fullscreenEnabled","webkitFullscreenEnabled","msFullscreenEnabled","FullscreenExit_default","Fullscreen_default","emptyTestingCardPlaceHolder","Typography","variant","href","ColorLens_default","TestingCard","divStyle","position","left","top","height","width","zIndex","backgroundColor","ReduxColorCard","connect","prop","ColorPickerButton","anchorEl","fill","concat","TransparencyGrid","fontSize","FormatColorFill_default","background","onMenuClosing","currentTarget","dataset","itemkey","getItems","parseInt","predefinedColors","selectedItem","aria-owns","aria-haspopup","renderButtonIcon","Menu_Menu","id","anchorOrigin","vertical","horizontal","transformOrigin","map","item","i","selected","MenuItem","data-itemkey","TestingCardPicker_TestingCardIcon","isChecked","items","ReduxColorPickerButton","TestingCardIcon","_React$Component","Check_default","renderIcon","App","appBarVisible","AppBar","onMouseMove","Toolbar","AppDrawer_AppDrawer","flex","FullScreenSwitch_FullscreenSwitch","withStyles","root","flexGrow","marginLeft","marginRight","display","alignItems","padding","justifyContent","isLocalhost","Boolean","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","catch","error","ReactDOM","es","src_App_0","getElementById","URL","process","toString","origin","fetch","response","status","headers","get","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker","module","exports","__webpack_require__","p"],"mappings":"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","file":"static/js/main.52d833a4.chunk.js","sourcesContent":["import { KnownTestingCard } from './models/TestingCards';\r\n\r\nexport enum ActionTypes {\r\n    SetTestingCard = \"SET_TESTING_CARD\",\r\n}\r\n\r\nexport interface ISetTestingCardAction {\r\n    type: ActionTypes.SetTestingCard,\r\n    card: KnownTestingCard\r\n}\r\n\r\nexport type Action = ISetTestingCardAction;\r\n\r\nexport function setTestingCard(card: KnownTestingCard): ISetTestingCardAction {\r\n    return { type: ActionTypes.SetTestingCard, card };\r\n}\r\n","export enum TestingCardTypes {\r\n    Empty = \"EmptyTestingCard\",\r\n    PureColor = \"PureColorTestingCard\"\r\n}\r\n\r\nexport interface ITestingCard {\r\n    name?: string,\r\n    type: TestingCardTypes\r\n}\r\n\r\nexport interface IEmptyTestingCard extends ITestingCard {\r\n    type: TestingCardTypes.Empty\r\n}\r\n\r\nexport interface IPureColorTestingCard extends ITestingCard {\r\n    type: TestingCardTypes.PureColor\r\n    color: string\r\n}\r\n\r\nexport const EmptyTestingCard: IEmptyTestingCard = { type: TestingCardTypes.Empty };\r\n\r\nexport type KnownTestingCard = IEmptyTestingCard | IPureColorTestingCard;\r\n\r\nclass PureColorTestingCard implements IPureColorTestingCard {\r\n    public type: TestingCardTypes.PureColor;\r\n    constructor(public name: string, public color: string) {\r\n        this.type = TestingCardTypes.PureColor;\r\n    }\r\n}\r\n\r\nexport const PredefinedTestingCards: KnownTestingCard[] = [\r\n    new PureColorTestingCard(\"Black\", \"#000000\"),\r\n    new PureColorTestingCard(\"White\", \"#FFFFFF\"),\r\n    new PureColorTestingCard(\"Gray\", \"#999999\"),\r\n    new PureColorTestingCard(\"Red\", \"#FF0000\"),\r\n    new PureColorTestingCard(\"Green\", \"#00FF00\"),\r\n    new PureColorTestingCard(\"Blue\", \"#0000FF\"),\r\n];\r\n","import { Action, ActionTypes } from './Actions';\r\nimport { EmptyTestingCard, KnownTestingCard } from './models/TestingCards';\r\n\r\nexport interface IState {\r\n    testingCard: KnownTestingCard\r\n}\r\n\r\nexport const InitialState: IState = { testingCard: EmptyTestingCard };\r\n\r\nexport function onReduce(state: IState = InitialState, action: Action)\r\n{\r\n    switch (action.type)\r\n    {\r\n        case ActionTypes.SetTestingCard:\r\n            return { ...state, testingCard: action.card };\r\n        default:\r\n            return state;\r\n    }\r\n}","import { createStore } from \"redux\";\r\n\r\nimport { InitialState, onReduce } from \"./Reducers\";\r\n\r\nconst __REDUX_DEVTOOLS_EXTENSION__ = (window as any).__REDUX_DEVTOOLS_EXTENSION__;\r\n\r\nconst store = createStore(onReduce, InitialState, __REDUX_DEVTOOLS_EXTENSION__ && __REDUX_DEVTOOLS_EXTENSION__());\r\n\r\nexport default store;\r\n","import { Divider, IconButton, List, ListItem, ListItemIcon, ListItemText, SwipeableDrawer } from '@material-ui/core';\r\nimport ChevronLeftIcon from '@material-ui/icons/ChevronLeft';\r\nimport CodeIcon from '@material-ui/icons/Code';\r\nimport HelpIcon from '@material-ui/icons/Help';\r\nimport MenuIcon from '@material-ui/icons/Menu';\r\nimport * as React from 'react';\r\n\r\nimport * as Actions from \"../Actions\"\r\nimport { EmptyTestingCard } from '../models/TestingCards';\r\nimport store from \"../Store\";\r\n\r\nexport interface IAppDrawerProps {\r\n    classes: {\r\n        drawerHeader?: any,\r\n        menuButton?: any\r\n    }\r\n}\r\n\r\ninterface IAppDrawerStates {\r\n    isOpen: boolean\r\n}\r\n\r\nexport class AppDrawer extends React.PureComponent<IAppDrawerProps, IAppDrawerStates> {\r\n\r\n    constructor(props: any) {\r\n        super(props);\r\n        this.state = { isOpen: false };\r\n    }\r\n\r\n    public render() {\r\n        const { classes } = this.props;\r\n        return <div>\r\n            <IconButton className={classes.menuButton} color=\"inherit\" aria-label=\"Menu\" onClick={this.onOpen}>\r\n                <MenuIcon />\r\n            </IconButton>\r\n            <SwipeableDrawer\r\n                anchor=\"left\"\r\n                open={this.state.isOpen}\r\n                onOpen={this.onOpen}\r\n                onClose={this.onClose}\r\n            >\r\n                <div className={classes.drawerHeader}>\r\n                    <IconButton onClick={this.onClose}>\r\n                        <ChevronLeftIcon />\r\n                    </IconButton>\r\n                </div>\r\n                <Divider style={{ minWidth: \"20em\" }} />\r\n                <List>\r\n                    <div onClick={this.onClose}>\r\n                        <ListItem button={true} onClick={this.onMenuShowHelp}>\r\n                            <ListItemIcon>\r\n                                <HelpIcon />\r\n                            </ListItemIcon>\r\n                            <ListItemText primary=\"Help\" />\r\n                        </ListItem>\r\n                        <ListItem button={true} onClick={this.onMenuShowSourceCode}>\r\n                            <ListItemIcon>\r\n                                <CodeIcon />\r\n                            </ListItemIcon>\r\n                            <ListItemText primary=\"Source Code\" />\r\n                        </ListItem>\r\n                    </div>\r\n                </List>\r\n                <Divider />\r\n            </SwipeableDrawer></div>\r\n    }\r\n\r\n    private onOpen = () => { this.setState({ isOpen: true }); };\r\n    private onClose = () => { this.setState({ isOpen: false }); };\r\n    private onMenuShowHelp = () => { store.dispatch(Actions.setTestingCard(EmptyTestingCard)); };\r\n    private onMenuShowSourceCode = () => { window.open(\"https://github.com/cxuesong/display-testing-cards\"); };\r\n\r\n}\r\n","import { IconButton, Tooltip } from '@material-ui/core';\r\nimport Fullscreen from '@material-ui/icons/Fullscreen';\r\nimport FullscreenExit from '@material-ui/icons/FullscreenExit';\r\nimport * as React from 'react';\r\n\r\ninterface IFullscreenSwitchStates {\r\n    isFullscreen: boolean\r\n};\r\n\r\nexport class FullscreenSwitch extends React.PureComponent<{}, IFullscreenSwitchStates> {\r\n    constructor(props: {}) {\r\n        super(props);\r\n        this.state = { isFullscreen: false };\r\n    }\r\n    public componentWillMount() {\r\n        document.addEventListener(\"fullscreenchange\", this.onFullScreenChanged);\r\n        document.addEventListener(\"webkitfullscreenchange\", this.onFullScreenChanged);\r\n        document.addEventListener(\"MSFullscreenChange\", this.onFullScreenChanged);\r\n    }\r\n    public componentWillUnmount() {\r\n        document.removeEventListener(\"fullscreenchange\", this.onFullScreenChanged);\r\n        document.removeEventListener(\"webkitfullscreenchange\", this.onFullScreenChanged);\r\n        document.removeEventListener(\"MSFullscreenChange\", this.onFullScreenChanged);\r\n    }\r\n    public render() {\r\n        const onButtonClicked = (e: React.MouseEvent<HTMLElement>) => {\r\n            if (this.state.isFullscreen) {\r\n                const fsdoc1 = document as any as IDocumentWithFullScreen;\r\n                (fsdoc1.exitFullscreen || fsdoc1.webkitExitFullscreen || fsdoc1.msExitFullscreen).apply(fsdoc1);\r\n            } else {\r\n                const fshtml = document.documentElement as any as IElementWithFullScreen;\r\n                (fshtml.requestFullscreen || fshtml.webkitRequestFullscreen || fshtml.msRequestFullscreen).apply(fshtml);\r\n            }\r\n        };\r\n        const isFullscreen = this.state.isFullscreen;\r\n        const fsdoc = document as any as IDocumentWithFullScreen;\r\n        return <Tooltip title={isFullscreen ? \"Exit fullscreen\" : \"Fullscreen\"}>\r\n            <IconButton\r\n                onClick={onButtonClicked}\r\n                color=\"inherit\"\r\n                disabled={!(fsdoc.fullscreenEnabled || fsdoc.webkitFullscreenEnabled || fsdoc.msFullscreenEnabled)}\r\n            >\r\n                {isFullscreen ? <FullscreenExit /> : <Fullscreen />}\r\n            </IconButton>\r\n        </Tooltip>\r\n    }\r\n    private onFullScreenChanged = (e: Event) => {\r\n        const fsdoc = document as any as IDocumentWithFullScreen;\r\n        const isFullScreen = !!(fsdoc.webkitIsFullScreen || fsdoc.fullscreenElement || fsdoc.msFullscreenElement);\r\n        this.setState({ isFullscreen: isFullScreen });\r\n    };\r\n}\r\n\r\ninterface IDocumentWithFullScreen {\r\n    fullscreenEnabled: boolean;\r\n    webkitFullscreenEnabled: boolean;\r\n    msFullscreenEnabled: boolean;\r\n    fullscreenElement: HTMLElement;\r\n    webkitIsFullScreen: boolean;\r\n    msFullscreenElement: HTMLElement;\r\n    exitFullscreen(): Promise<void>;\r\n    webkitExitFullscreen(): Promise<void>;\r\n    msExitFullscreen(): Promise<void>;\r\n}\r\n\r\ninterface IElementWithFullScreen {\r\n    requestFullscreen(options?: FullscreenOptions): Promise<void>;\r\n    webkitRequestFullscreen(options?: FullscreenOptions): Promise<void>;\r\n    msRequestFullscreen(options?: FullscreenOptions): Promise<void>;\r\n}\r\n","import { Typography } from '@material-ui/core';\r\nimport ColorLens from '@material-ui/icons/ColorLens';\r\nimport Fullscreen from '@material-ui/icons/Fullscreen';\r\nimport * as React from 'react';\r\nimport { connect } from 'react-redux';\r\n\r\nimport { IPureColorTestingCard, ITestingCard, TestingCardTypes } from '../models/TestingCards';\r\nimport { IState } from '../Reducers';\r\n\r\nexport interface ITestingCardProps {\r\n    card: ITestingCard\r\n}\r\n\r\ntype ITestingCardMergedProps = ITestingCardProps;\r\n\r\nconst emptyTestingCardPlaceHolder = (<div className=\"testingcard-instructions\">\r\n    <div>\r\n        <Typography variant=\"h4\">Display Testing Cards</Typography>\r\n        <Typography variant=\"h6\">a monitor testing app brought to you by <a href=\"https://github.com/cxuesong\">CXuesong</a>.</Typography>\r\n        <hr />\r\n        <Typography variant=\"subtitle1\" className=\"vcenter-images\">\r\n            Hover your mouse to / touch the top border for menus.<br />\r\n            To get started, choose a testing card by clicking <ColorLens /> button;<br />\r\n            then click <Fullscreen /> to display the testing cards in full screen.<br />\r\n        </Typography>\r\n        <p />\r\n        <Typography><a href=\"https://github.com/cxuesong/display-testing-cards\">Source Code on GitHub</a> | <a href=\"https://github.com/cxuesong/display-testing-cards/issues\">Issue &amp; Suggestion</a></Typography>\r\n    </div>\r\n</div>);\r\n\r\nexport class TestingCard extends React.PureComponent<ITestingCardMergedProps>\r\n{\r\n    public render() {\r\n        const divStyle: React.CSSProperties = {\r\n            position: \"absolute\",\r\n            left: \"0\",\r\n            top: \"0\",\r\n            height: \"100%\",\r\n            width: \"100%\",\r\n            zIndex: -1,\r\n        };\r\n        const card = this.props.card;\r\n        switch (card.type) {\r\n            case TestingCardTypes.Empty:\r\n                return (<div style={divStyle}>{emptyTestingCardPlaceHolder}</div>);\r\n            case TestingCardTypes.PureColor:\r\n                divStyle.backgroundColor = (card as IPureColorTestingCard).color\r\n                break;\r\n            default:\r\n        }\r\n        return (<div style={divStyle} />);\r\n    }\r\n}\r\n\r\nexport const ReduxColorCard = connect(\r\n    (state: IState, prop: {}): ITestingCardMergedProps => {\r\n        return { card: state.testingCard };\r\n    })(TestingCard);\r\n","import { IconButton, ListItemIcon, ListItemText, Menu, MenuItem, Tooltip } from '@material-ui/core';\r\nimport ColorLens from '@material-ui/icons/ColorLens';\r\nimport Check from '@material-ui/icons/Check';\r\nimport FormatColorFill from '@material-ui/icons/FormatColorFill';\r\nimport * as React from 'react';\r\nimport { connect } from 'react-redux';\r\n\r\nimport * as Actions from \"../Actions\"\r\nimport { PredefinedTestingCards, TestingCardTypes, KnownTestingCard } from '../models/TestingCards';\r\nimport { IState } from '../Reducers';\r\nimport store from \"../Store\";\r\nimport TransparencyGrid from \"../images/transparency-grid.svg\"\r\nimport \"./TestingCardPicker.css\"\r\n\r\ninterface IColorPickerButtonStates {\r\n    anchorEl?: HTMLElement\r\n}\r\n\r\ninterface IColorPickerButtonConnectedProps {\r\n    selectedItem: KnownTestingCard\r\n}\r\n\r\nexport interface IColorPickerButtonProps {\r\n    items?: KnownTestingCard[],\r\n}\r\n\r\ntype IColorPickerButtonMergedProps = IColorPickerButtonProps & IColorPickerButtonConnectedProps;\r\n\r\nexport class ColorPickerButton extends React.PureComponent<IColorPickerButtonMergedProps, IColorPickerButtonStates>\r\n{\r\n    constructor(props: IColorPickerButtonProps & IColorPickerButtonConnectedProps) {\r\n        super(props)\r\n        this.state = { anchorEl: undefined };\r\n    }\r\n    public renderButtonIcon(card: KnownTestingCard) {\r\n        switch (card.type) {\r\n            case TestingCardTypes.Empty:\r\n            case TestingCardTypes.PureColor:\r\n                const fill = card.type === TestingCardTypes.Empty ? `url(${TransparencyGrid})` : card.color;\r\n                return (<div style={{ position: \"relative\", fontSize: 0 }}>\r\n                    <FormatColorFill style={{ position: \"relative\", left: 0, top: 0 }} />\r\n                    <div style={{ background: fill, width: \"100%\", height: \"4px\", position: \"absolute\", top: \"20px\" }}>\r\n                    </div>\r\n                </div>);\r\n            default:\r\n                return <ColorLens />;\r\n        }\r\n    }\r\n    public render() {\r\n        const onButtonClicked = (e: React.MouseEvent<HTMLElement>) => {\r\n            this.setState({ anchorEl: e.currentTarget });\r\n        };\r\n        const onMenuClosing = (e: React.MouseEvent<HTMLElement>) => {\r\n            if (e.currentTarget.dataset.itemkey) {\r\n                const card = this.getItems()[parseInt(e.currentTarget.dataset.itemkey, 10)];\r\n                store.dispatch(Actions.setTestingCard(card));\r\n            }\r\n            this.setState({ anchorEl: undefined });\r\n        };\r\n        const predefinedColors = this.getItems();\r\n        const { selectedItem } = this.props;\r\n        return (<div>\r\n            <Tooltip title=\"Choose a testing card\">\r\n                <IconButton\r\n                    aria-owns={this.state.anchorEl ? 'menu-appbar' : undefined}\r\n                    aria-haspopup=\"true\"\r\n                    onClick={onButtonClicked}\r\n                    color=\"inherit\"\r\n                >\r\n                    {this.renderButtonIcon(selectedItem)}\r\n                </IconButton>\r\n            </Tooltip>\r\n            <Menu\r\n                id=\"menu-appbar\"\r\n                anchorEl={this.state.anchorEl}\r\n                anchorOrigin={{\r\n                    vertical: 'top',\r\n                    horizontal: 'right',\r\n                }}\r\n                transformOrigin={{\r\n                    vertical: 'top',\r\n                    horizontal: 'right',\r\n                }}\r\n                open={!!this.state.anchorEl}\r\n                onClose={onMenuClosing}\r\n            >\r\n                {predefinedColors.map((item, i) => {\r\n                    const selected = this.props.selectedItem === item;\r\n                    return (<MenuItem\r\n                        key={i}\r\n                        onClick={onMenuClosing}\r\n                        data-itemkey={i}\r\n                        selected={selected}\r\n                    >\r\n                        <TestingCardIcon card={item} isChecked={selected} />\r\n                        <ListItemText primary={item.name} />\r\n                    </MenuItem>);\r\n                })}\r\n            </Menu>\r\n        </div>)\r\n    }\r\n    private getItems() {\r\n        return this.props.items || PredefinedTestingCards;\r\n    }\r\n}\r\n\r\nexport const ReduxColorPickerButton = connect(\r\n    (state: IState, prop: IColorPickerButtonProps): IColorPickerButtonMergedProps => {\r\n        return { items: prop.items, selectedItem: state.testingCard };\r\n    })(ColorPickerButton);\r\n\r\nexport interface ITestingCardIconProps {\r\n    card: KnownTestingCard,\r\n    isChecked: boolean\r\n}\r\n\r\nexport class TestingCardIcon extends React.Component<ITestingCardIconProps, {}>\r\n{\r\n    constructor(props: ITestingCardIconProps) {\r\n        super(props);\r\n    }\r\n    private renderIcon() {\r\n        const { card } = this.props;\r\n        const fill = card.type === TestingCardTypes.Empty ? `url(${TransparencyGrid})` : card.color;\r\n        return (<div className=\"testing-card-icon\" style={{ background: fill }}>\r\n            {this.props.isChecked && <Check />}\r\n        </div>);\r\n    }\r\n    public render() {\r\n        return <React.Fragment>\r\n            <ListItemIcon>{this.renderIcon()}</ListItemIcon>\r\n        </React.Fragment>\r\n    }\r\n}\r\n","// import Button from '@material-ui/core/Button';\r\nimport * as React from 'react';\r\nimport './App.css';\r\n\r\nimport { AppBar, Toolbar, Typography } from '@material-ui/core';\r\nimport { withStyles } from '@material-ui/core/styles';\r\n\r\nimport { AppDrawer } from './components/AppDrawer';\r\nimport { FullscreenSwitch } from './components/FullScreenSwitch';\r\nimport { ReduxColorCard } from './components/TestingCard';\r\nimport { ReduxColorPickerButton } from './components/TestingCardPicker';\r\n\r\nconst styles = {\r\n  root: {\r\n    flexGrow: 1,\r\n  },\r\n  flex: {\r\n    flexGrow: 1,\r\n  },\r\n  menuButton: {\r\n    marginLeft: -18,\r\n    marginRight: 10,\r\n  },\r\n  drawerHeader: {\r\n    display: 'flex',\r\n    alignItems: 'center',\r\n    padding: '0 8px',\r\n    justifyContent: 'flex-end',\r\n  },\r\n};\r\n\r\nclass App extends React.PureComponent<any, { appBarVisible: boolean }> {\r\n\r\n  constructor(props: any) {\r\n    super(props)\r\n    this.state = { appBarVisible: true };\r\n  }\r\n\r\n  public render() {\r\n    const { classes } = this.props;\r\n    const onAppBarMouseMove = (e: React.MouseEvent<HTMLElement>) => {\r\n      this.setState({\r\n        appBarVisible: true\r\n      });\r\n    };\r\n    const onMouseMove = (e: React.MouseEvent<HTMLElement>) => {\r\n      this.setState({\r\n        appBarVisible: false\r\n      });\r\n    };\r\n    return (\r\n      <div className=\"App\">\r\n        <AppBar position=\"static\"\r\n          className={this.state.appBarVisible ? \"fade-in\" : \"fade-out\"}\r\n          onMouseMove={onAppBarMouseMove}>\r\n          <Toolbar>\r\n            <AppDrawer classes={{ drawerHeader: classes.drawerHeader, menuButton: classes.menuButton }} />\r\n            <Typography variant=\"h6\" color=\"inherit\" className={classes.flex}>\r\n              Display Testing Cards\r\n            </Typography>\r\n            <FullscreenSwitch />\r\n            <ReduxColorPickerButton />\r\n          </Toolbar>\r\n        </AppBar>\r\n\r\n        <div onMouseMove={onMouseMove}>\r\n          <ReduxColorCard />\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n\r\n}\r\n\r\nexport default withStyles(styles)(App);\r\n","// tslint:disable:no-console\r\n// In production, we register a service worker to serve assets from local cache.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on the 'N+1' visit to a page, since previously\r\n// cached resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\r\n// This link also includes instructions on opting out of this behavior.\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport default function register() {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(\r\n      process.env.PUBLIC_URL!,\r\n      window.location.toString()\r\n    );\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Lets check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not local host. Just register service worker\r\n        registerValidSW(swUrl);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl: string) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker) {\r\n          installingWorker.onstatechange = () => {\r\n            if (installingWorker.state === 'installed') {\r\n              if (navigator.serviceWorker.controller) {\r\n                // At this point, the old content will have been purged and\r\n                // the fresh content will have been added to the cache.\r\n                // It's the perfect time to display a 'New content is\r\n                // available; please refresh.' message in your web app.\r\n                console.log('New content is available; please refresh.');\r\n              } else {\r\n                // At this point, everything has been precached.\r\n                // It's the perfect time to display a\r\n                // 'Content is cached for offline use.' message.\r\n                console.log('Content is cached for offline use.');\r\n              }\r\n            }\r\n          };\r\n        }\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      if (\r\n        response.status === 404 ||\r\n        response.headers.get('content-type')!.indexOf('javascript') === -1\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import * as React from 'react';\r\nimport * as ReactDOM from 'react-dom';\r\nimport {Provider} from 'react-redux'\r\n\r\nimport App from './App';\r\nimport './index.css';\r\nimport registerServiceWorker from './registerServiceWorker';\r\nimport store from \"./Store\";\r\n\r\nReactDOM.render(\r\n  <Provider store={store}><App /></Provider>,\r\n  document.getElementById('root') as HTMLElement\r\n);\r\nregisterServiceWorker();\r\n","module.exports = __webpack_public_path__ + \"static/media/transparency-grid.11071c12.svg\";"],"sourceRoot":""}