{"version":3,"sources":["Actions.ts","models/TestingCards.ts","Reducers.ts","Store.ts","components/AppDrawer.tsx","components/FullScreenSwitch.tsx","components/TestingCard.tsx","components/TestingCardPicker.tsx","App.tsx","registerServiceWorker.ts","index.tsx"],"names":["ActionTypes","TestingCardTypes","setTestingCard","card","type","SetTestingCard","EmptyTestingCard","Empty","PureColorTestingCard","name","color","this","PureColor","PredefinedTestingCards","InitialState","testingCard","__REDUX_DEVTOOLS_EXTENSION__","window","Store","Object","redux","state","action","__assign","AppDrawer_AppDrawer","_super","AppDrawer","props","_this","call","onOpen","setState","isOpen","onClose","onMenuShowHelp","dispatch","onMenuShowSourceCode","open","__extends","prototype","render","react","index_es","className","menuButtonClassName","aria-label","onClick","Menu_default","a","anchor","ChevronLeft_default","style","minWidth","button","Help_default","primary","Code_default","FullScreenSwitch_FullscreenSwitch","FullscreenSwitch","onFullScreenChanged","e","fsdoc","document","isFullScreen","webkitIsFullScreen","fullscreenElement","msFullscreenElement","isFullscreen","FullScreenSwitch_extends","componentWillMount","addEventListener","componentWillUnmount","removeEventListener","title","fsdoc1","exitFullscreen","webkitExitFullscreen","msExitFullscreen","apply","fshtml","documentElement","requestFullscreen","webkitRequestFullscreen","msRequestFullscreen","disabled","fullscreenEnabled","webkitFullscreenEnabled","msFullscreenEnabled","FullscreenExit_default","Fullscreen_default","emptyTestingCardPlaceHolder","variant","href","ColorLens_default","TestingCard_TestingCard","TestingCard","TestingCard_extends","divStyle","position","left","top","height","width","zIndex","backgroundColor","ReduxColorCard","es","prop","TestingCardPicker_ColorPickerButton","ColorPickerButton","anchorEl","undefined","TestingCardPicker_extends","onMenuClosing","currentTarget","dataset","itemkey","getItems","parseInt","predefinedColors","aria-owns","aria-haspopup","id","anchorOrigin","vertical","horizontal","transformOrigin","map","item","i","key","data-itemkey","selectedItem","RadioButtonChecked_default","RadioButtonUnchecked_default","items","ReduxColorPickerButton","App_App","App","appBarVisible","App_extends","classes","onMouseMove","menuButton","flex","src_App_0","styles","marginLeft","marginRight","root","flexGrow","isLocalhost","Boolean","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","catch","error","react_dom","store","getElementById","URL","toString","origin","fetch","response","status","headers","get","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.8bc811c1.chunk.js","sourcesContent":["import { ITestingCard } from './models/TestingCards';\r\n\r\nexport enum ActionTypes {\r\n    SetTestingCard = \"SET_TESTING_CARD\",\r\n}\r\n\r\nexport interface ISetTestingCardAction {\r\n    type: ActionTypes.SetTestingCard,\r\n    card: ITestingCard\r\n}\r\n\r\nexport type Action = ISetTestingCardAction;\r\n\r\nexport function setTestingCard(card: ITestingCard): ISetTestingCardAction {\r\n    return { type: ActionTypes.SetTestingCard, card };\r\n}\r\n","export enum TestingCardTypes\r\n{\r\n    Empty = \"EmptyTestingCard\",\r\n    PureColor = \"PureColorTestingCard\"\r\n}\r\n\r\nexport interface ITestingCard\r\n{\r\n    name?: string,\r\n    type: TestingCardTypes\r\n}\r\n\r\nexport interface IPureColorTestingCard extends ITestingCard\r\n{\r\n    type: TestingCardTypes.PureColor\r\n    color: string,\r\n}\r\n\r\nexport const EmptyTestingCard: ITestingCard = { type: TestingCardTypes.Empty };\r\n\r\nclass PureColorTestingCard implements IPureColorTestingCard {\r\n    public type: TestingCardTypes.PureColor;\r\n    constructor(public name: string, public color: string)\r\n    {\r\n        this.type = TestingCardTypes.PureColor;\r\n    }\r\n}\r\n\r\nexport const PredefinedTestingCards: ITestingCard[] = [\r\n    new PureColorTestingCard( \"Black\", \"#000000\"),\r\n    new PureColorTestingCard( \"White\", \"#FFFFFF\"),\r\n    new PureColorTestingCard( \"Gray\", \"#999999\"),\r\n    new PureColorTestingCard( \"Red\", \"#FF0000\"),\r\n    new PureColorTestingCard( \"Green\", \"#00FF00\"),\r\n    new PureColorTestingCard( \"Blue\", \"#0000FF\"),\r\n];\r\n","import { Action, ActionTypes } from './Actions';\r\nimport { EmptyTestingCard, ITestingCard } from './models/TestingCards';\r\n\r\nexport interface IState {\r\n    testingCard: ITestingCard\r\n}\r\n\r\nexport const InitialState: IState = { testingCard: EmptyTestingCard };\r\n\r\nexport function onReduce(state: IState = InitialState, action: Action)\r\n{\r\n    switch (action.type)\r\n    {\r\n        case ActionTypes.SetTestingCard:\r\n            return { ...state, testingCard: action.card };\r\n        default:\r\n            return state;\r\n    }\r\n}","import { createStore } from \"redux\";\r\n\r\nimport { InitialState, onReduce } from \"./Reducers\";\r\n\r\nconst __REDUX_DEVTOOLS_EXTENSION__ = (window as any).__REDUX_DEVTOOLS_EXTENSION__;\r\n\r\nconst store = createStore(onReduce, InitialState, __REDUX_DEVTOOLS_EXTENSION__ && __REDUX_DEVTOOLS_EXTENSION__());\r\n\r\nexport default store;\r\n","import { Divider, Drawer, IconButton, List, ListItem, ListItemIcon, ListItemText } from '@material-ui/core';\r\nimport ChevronLeftIcon from '@material-ui/icons/ChevronLeft';\r\nimport CodeIcon from '@material-ui/icons/Code';\r\nimport HelpIcon from '@material-ui/icons/Help';\r\nimport MenuIcon from '@material-ui/icons/Menu';\r\nimport * as React from 'react';\r\n\r\nimport * as Actions from \"../Actions\"\r\nimport { EmptyTestingCard } from '../models/TestingCards';\r\nimport store from \"../Store\";\r\n\r\nexport interface IAppDrawerProps {\r\n    menuButtonClassName: any\r\n}\r\n\r\ninterface IAppDrawerStates {\r\n    isOpen: boolean\r\n}\r\n\r\nexport class AppDrawer extends React.Component<IAppDrawerProps, IAppDrawerStates> {\r\n\r\n    constructor(props: any) {\r\n        super(props);\r\n        this.state = { isOpen: false };\r\n    }\r\n\r\n    public render() {\r\n        return <div>\r\n            <IconButton className={this.props.menuButtonClassName} color=\"inherit\" aria-label=\"Menu\" onClick={this.onOpen}>\r\n                <MenuIcon />\r\n            </IconButton>\r\n            <Drawer\r\n                anchor=\"left\"\r\n                open={this.state.isOpen}\r\n                onClose={this.onClose}\r\n            >\r\n                <IconButton onClick={this.onClose}>\r\n                    <ChevronLeftIcon />\r\n                </IconButton>\r\n                <Divider style={{ minWidth: \"20em\" }} />\r\n                <List>\r\n                    <div onClick={this.onClose}>\r\n                        <ListItem button={true} onClick={this.onMenuShowHelp}>\r\n                            <ListItemIcon>\r\n                                <HelpIcon />\r\n                            </ListItemIcon>\r\n                            <ListItemText primary=\"Help\" />\r\n                        </ListItem>\r\n                        <ListItem button={true} onClick={this.onMenuShowSourceCode}>\r\n                            <ListItemIcon>\r\n                                <CodeIcon />\r\n                            </ListItemIcon>\r\n                            <ListItemText primary=\"Source Code\" />\r\n                        </ListItem>\r\n                    </div>\r\n                </List>\r\n                <Divider />\r\n            </Drawer></div>\r\n    }\r\n\r\n    private onOpen = () => { this.setState({ isOpen: true }); };\r\n    private onClose = () => { this.setState({ isOpen: false }); };\r\n    private onMenuShowHelp = () => { store.dispatch(Actions.setTestingCard(EmptyTestingCard)); };\r\n    private onMenuShowSourceCode = () => { window.open(\"https://github.com/cxuesong/display-testing-cards\"); };\r\n\r\n}","import { IconButton, Tooltip } from '@material-ui/core';\r\nimport Fullscreen from '@material-ui/icons/Fullscreen';\r\nimport FullscreenExit from '@material-ui/icons/FullscreenExit';\r\nimport * as React from 'react';\r\n\r\ninterface IFullscreenSwitchStates {\r\n    isFullscreen: boolean\r\n};\r\n\r\nexport class FullscreenSwitch extends React.Component<{}, IFullscreenSwitchStates> {\r\n    constructor(props: {}) {\r\n        super(props);\r\n        this.state = { isFullscreen: false };\r\n    }\r\n    public componentWillMount() {\r\n        document.addEventListener(\"fullscreenchange\", this.onFullScreenChanged);\r\n        document.addEventListener(\"webkitfullscreenchange\", this.onFullScreenChanged);\r\n        document.addEventListener(\"MSFullscreenChange\", this.onFullScreenChanged);\r\n    }\r\n    public componentWillUnmount() {\r\n        document.removeEventListener(\"fullscreenchange\", this.onFullScreenChanged);\r\n        document.removeEventListener(\"webkitfullscreenchange\", this.onFullScreenChanged);\r\n        document.removeEventListener(\"MSFullscreenChange\", this.onFullScreenChanged);\r\n    }\r\n    public render() {\r\n        const onButtonClicked = (e: React.MouseEvent<HTMLElement>) => {\r\n            if (this.state.isFullscreen) {\r\n                const fsdoc1 = document as any as IDocumentWithFullScreen;\r\n                (fsdoc1.exitFullscreen || fsdoc1.webkitExitFullscreen || fsdoc1.msExitFullscreen).apply(fsdoc1);\r\n            } else {\r\n                const fshtml = document.documentElement as any as IElementWithFullScreen;\r\n                (fshtml.requestFullscreen || fshtml.webkitRequestFullscreen || fshtml.msRequestFullscreen).apply(fshtml);\r\n            }\r\n        };\r\n        const isFullscreen = this.state.isFullscreen;\r\n        const fsdoc = document as any as IDocumentWithFullScreen;\r\n        return <Tooltip title={isFullscreen ? \"Exit fullscreen\" : \"Fullscreen\"}>\r\n            <IconButton\r\n                onClick={onButtonClicked}\r\n                color=\"inherit\"\r\n                disabled={!(fsdoc.fullscreenEnabled || fsdoc.webkitFullscreenEnabled || fsdoc.msFullscreenEnabled)}\r\n            >\r\n                {isFullscreen ? <FullscreenExit /> : <Fullscreen />}\r\n            </IconButton>\r\n        </Tooltip>\r\n    }\r\n    private onFullScreenChanged = (e: Event) => {\r\n        const fsdoc = document as any as IDocumentWithFullScreen;\r\n        const isFullScreen = !!(fsdoc.webkitIsFullScreen || fsdoc.fullscreenElement || fsdoc.msFullscreenElement);\r\n        this.setState({ isFullscreen: isFullScreen });\r\n    };\r\n}\r\n\r\ninterface IDocumentWithFullScreen {\r\n    fullscreenEnabled: boolean;\r\n    webkitFullscreenEnabled: boolean;\r\n    msFullscreenEnabled: boolean;\r\n    fullscreenElement: HTMLElement;\r\n    webkitIsFullScreen: boolean;\r\n    msFullscreenElement: HTMLElement;\r\n    exitFullscreen(): Promise<void>;\r\n    webkitExitFullscreen(): Promise<void>;\r\n    msExitFullscreen(): Promise<void>;\r\n}\r\n\r\ninterface IElementWithFullScreen {\r\n    requestFullscreen(options?: FullscreenOptions): Promise<void>;\r\n    webkitRequestFullscreen(options?: FullscreenOptions): Promise<void>;\r\n    msRequestFullscreen(options?: FullscreenOptions): Promise<void>;\r\n}\r\n","import { Typography } from '@material-ui/core';\r\nimport ColorLens from '@material-ui/icons/ColorLens';\r\nimport Fullscreen from '@material-ui/icons/Fullscreen';\r\nimport * as React from 'react';\r\nimport { connect } from 'react-redux';\r\n\r\nimport { IPureColorTestingCard, ITestingCard, TestingCardTypes } from '../models/TestingCards';\r\nimport { IState } from '../Reducers';\r\n\r\nexport interface ITestingCardProps {\r\n    card: ITestingCard\r\n}\r\n\r\ntype ITestingCardMergedProps = ITestingCardProps;\r\n\r\nconst emptyTestingCardPlaceHolder = (<div className=\"testingcard-instructions\">\r\n    <div>\r\n        <Typography variant=\"display1\">Display Testing Cards</Typography>\r\n        <Typography variant=\"title\">a monitor testing app brought to you by <a href=\"https://github.com/cxuesong\">CXuesong</a>.</Typography>\r\n        <hr />\r\n        <Typography variant=\"subheading\">\r\n            Hover your mouse to / touch the top border for menus.<br />\r\n            To get started, choose a testing card by clicking <ColorLens /> button;<br />\r\n            then click <Fullscreen /> to display the testing cards in full screen.<br />\r\n        </Typography>\r\n        <p />\r\n        <Typography><a href=\"https://github.com/cxuesong/display-testing-cards\">Source Code on GitHub</a> | <a href=\"https://github.com/cxuesong/display-testing-cards/issues\">Issue &amp; Suggestion</a></Typography>\r\n    </div>\r\n</div>);\r\n\r\nexport class TestingCard extends React.Component<ITestingCardMergedProps>\r\n{\r\n    public render() {\r\n        const divStyle: React.CSSProperties = {\r\n            position: \"absolute\",\r\n            left: \"0\",\r\n            top: \"0\",\r\n            height: \"100%\",\r\n            width: \"100%\",\r\n            zIndex: -1,\r\n        };\r\n        const card = this.props.card;\r\n        switch (card.type) {\r\n            case TestingCardTypes.Empty:\r\n                return (<div style={divStyle}>{emptyTestingCardPlaceHolder}</div>);\r\n            case TestingCardTypes.PureColor:\r\n                divStyle.backgroundColor = (card as IPureColorTestingCard).color\r\n                break;\r\n        }\r\n        return (<div style={divStyle} />);\r\n    }\r\n}\r\n\r\nexport const ReduxColorCard = connect(\r\n    (state: IState, prop: {}): ITestingCardMergedProps => {\r\n        return { card: state.testingCard };\r\n    })(TestingCard);\r\n","import { IconButton, ListItemIcon, ListItemText, Menu, MenuItem, Tooltip } from '@material-ui/core';\r\nimport ColorLens from '@material-ui/icons/ColorLens';\r\nimport RadioButtonChecked from '@material-ui/icons/RadioButtonChecked';\r\nimport RadioButtonUnchecked from '@material-ui/icons/RadioButtonUnchecked';\r\nimport * as React from 'react';\r\nimport { connect } from 'react-redux';\r\n\r\nimport * as Actions from \"../Actions\"\r\nimport { ITestingCard, PredefinedTestingCards } from '../models/TestingCards';\r\nimport { IState } from '../Reducers';\r\nimport store from \"../Store\";\r\n\r\ninterface IColorPickerButtonStates {\r\n    anchorEl?: HTMLElement\r\n}\r\n\r\ninterface IColorPickerButtonConnectedProps {\r\n    selectedItem: ITestingCard\r\n}\r\n\r\nexport interface IColorPickerButtonProps {\r\n    items?: ITestingCard[],\r\n}\r\n\r\ntype IColorPickerButtonMergedProps = IColorPickerButtonProps & IColorPickerButtonConnectedProps;\r\n\r\nexport class ColorPickerButton extends React.Component<IColorPickerButtonMergedProps, IColorPickerButtonStates>\r\n{\r\n    constructor(props: IColorPickerButtonProps & IColorPickerButtonConnectedProps) {\r\n        super(props)\r\n        this.state = { anchorEl: undefined };\r\n    }\r\n    public render() {\r\n        const onButtonClicked = (e: React.MouseEvent<HTMLElement>) => {\r\n            this.setState({ anchorEl: e.currentTarget });\r\n        };\r\n        const onMenuClosing = (e: React.MouseEvent<HTMLElement>) => {\r\n            if (e.currentTarget.dataset.itemkey) {\r\n                const card = this.getItems()[parseInt(e.currentTarget.dataset.itemkey, 10)];\r\n                store.dispatch(Actions.setTestingCard(card));\r\n            }\r\n            this.setState({ anchorEl: undefined });\r\n        };\r\n        const predefinedColors = this.getItems();\r\n        return (<div>\r\n            <Tooltip title=\"Choose a testing card\">\r\n                <IconButton\r\n                    aria-owns={open ? 'menu-appbar' : undefined}\r\n                    aria-haspopup=\"true\"\r\n                    onClick={onButtonClicked}\r\n                    color=\"inherit\"\r\n                >\r\n                    <ColorLens />\r\n                </IconButton>\r\n            </Tooltip>\r\n            <Menu\r\n                id=\"menu-appbar\"\r\n                anchorEl={this.state.anchorEl}\r\n                anchorOrigin={{\r\n                    vertical: 'top',\r\n                    horizontal: 'right',\r\n                }}\r\n                transformOrigin={{\r\n                    vertical: 'top',\r\n                    horizontal: 'right',\r\n                }}\r\n                open={!!this.state.anchorEl}\r\n                onClose={onMenuClosing}\r\n            >\r\n                {predefinedColors.map((item, i) => {\r\n                    return (<MenuItem\r\n                        key={i}\r\n                        onClick={onMenuClosing}\r\n                        data-itemkey={i}\r\n                    >\r\n                        <ListItemIcon>{this.props.selectedItem === item ? <RadioButtonChecked /> : <RadioButtonUnchecked />}</ListItemIcon>\r\n                        <ListItemText primary={item.name} />\r\n                    </MenuItem>);\r\n                })}\r\n            </Menu>\r\n        </div>)\r\n    }\r\n    private getItems() {\r\n        return this.props.items || PredefinedTestingCards;\r\n    }\r\n}\r\n\r\nexport const ReduxColorPickerButton = connect(\r\n    (state: IState, prop: IColorPickerButtonProps): IColorPickerButtonMergedProps => {\r\n        return { items: prop.items, selectedItem: state.testingCard };\r\n    })(ColorPickerButton);\r\n","// import Button from '@material-ui/core/Button';\r\nimport * as React from 'react';\r\nimport './App.css';\r\n\r\nimport { AppBar, Toolbar, Typography } from '@material-ui/core';\r\nimport { withStyles } from '@material-ui/core/styles';\r\n\r\nimport { AppDrawer } from './components/AppDrawer';\r\nimport { FullscreenSwitch } from './components/FullScreenSwitch';\r\nimport { ReduxColorCard } from './components/TestingCard';\r\nimport { ReduxColorPickerButton } from './components/TestingCardPicker';\r\n\r\nconst styles = {\r\n  menuButton: {\r\n    marginLeft: -18,\r\n    marginRight: 10,\r\n  },\r\n  root: {\r\n    flexGrow: 1,\r\n  },\r\n  flex: {\r\n    flexGrow: 1,\r\n  },\r\n};\r\n\r\nclass App extends React.Component<any, { appBarVisible: boolean }> {\r\n\r\n  constructor(props: any) {\r\n    super(props)\r\n    this.state = { appBarVisible: true };\r\n  }\r\n\r\n  public render() {\r\n    const { classes } = this.props;\r\n    const onAppBarMouseMove = (e: React.MouseEvent<HTMLElement>) => {\r\n      this.setState({\r\n        appBarVisible: true\r\n      });\r\n    };\r\n    const onMouseMove = (e: React.MouseEvent<HTMLElement>) => {\r\n      this.setState({\r\n        appBarVisible: false\r\n      });\r\n    };\r\n    return (\r\n      <div className=\"App\">\r\n        <AppBar position=\"static\"\r\n          className={this.state.appBarVisible ? \"fade-in\" : \"fade-out\"}\r\n          onMouseMove={onAppBarMouseMove}>\r\n          <Toolbar>\r\n            <AppDrawer menuButtonClassName={classes.menuButton} />\r\n            <Typography variant=\"title\" color=\"inherit\" className={classes.flex}>\r\n              Display Testing Cards\r\n            </Typography>\r\n            <FullscreenSwitch />\r\n            <ReduxColorPickerButton />\r\n          </Toolbar>\r\n        </AppBar>\r\n\r\n        <div onMouseMove={onMouseMove}>\r\n          <ReduxColorCard />\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n\r\n}\r\n\r\nexport default withStyles(styles)(App);\r\n","// tslint:disable:no-console\r\n// In production, we register a service worker to serve assets from local cache.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on the 'N+1' visit to a page, since previously\r\n// cached resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\r\n// This link also includes instructions on opting out of this behavior.\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport default function register() {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(\r\n      process.env.PUBLIC_URL!,\r\n      window.location.toString()\r\n    );\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Lets check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not local host. Just register service worker\r\n        registerValidSW(swUrl);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl: string) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker) {\r\n          installingWorker.onstatechange = () => {\r\n            if (installingWorker.state === 'installed') {\r\n              if (navigator.serviceWorker.controller) {\r\n                // At this point, the old content will have been purged and\r\n                // the fresh content will have been added to the cache.\r\n                // It's the perfect time to display a 'New content is\r\n                // available; please refresh.' message in your web app.\r\n                console.log('New content is available; please refresh.');\r\n              } else {\r\n                // At this point, everything has been precached.\r\n                // It's the perfect time to display a\r\n                // 'Content is cached for offline use.' message.\r\n                console.log('Content is cached for offline use.');\r\n              }\r\n            }\r\n          };\r\n        }\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      if (\r\n        response.status === 404 ||\r\n        response.headers.get('content-type')!.indexOf('javascript') === -1\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import * as React from 'react';\r\nimport * as ReactDOM from 'react-dom';\r\nimport {Provider} from 'react-redux'\r\n\r\nimport App from './App';\r\nimport './index.css';\r\nimport registerServiceWorker from './registerServiceWorker';\r\nimport store from \"./Store\";\r\n\r\nReactDOM.render(\r\n  <Provider store={store}><App /></Provider>,\r\n  document.getElementById('root') as HTMLElement\r\n);\r\nregisterServiceWorker();\r\n"],"sourceRoot":""}